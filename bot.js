const { Telegraf } = require('telegraf');
const schedule = require('node-schedule');
const { BOT_TOKEN, CHANNEL_ID, ADMIN_ID } = require('./config');
const { startServer } = require('./server');
const moment = require('moment'); // –î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏

const bot = new Telegraf(BOT_TOKEN);
let queue = [];
let mediaGroups = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, messageId, caption) {
	try {
		await bot.telegram.copyMessage(CHANNEL_ID, chatId, messageId, { caption });
	} catch (error) {
		throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
async function sendMediaGroup(media) {
	try {
		await bot.telegram.sendMediaGroup(CHANNEL_ID, media);
	} catch (error) {
		throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: ${error.message}`);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendReply(message, text) {
	try {
		await bot.telegram.sendMessage(message.chat.id, text);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error.message);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fileId –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
function getFileId(message) {
	const mediaType = ['photo', 'video', 'document', 'audio'].find(
		(type) => message[type]
	);
	return mediaType
		? message[mediaType].file_id ||
				message[mediaType][message[mediaType].length - 1].file_id
		: null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
function processMediaGroup(message, mediaGroupId, mediaArray) {
	const mediaType = ['photo', 'video', 'document', 'audio'].find(
		(type) => message[type]
	); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
	const fileId = getFileId(message); // –ü–æ–ª—É—á–∞–µ–º file_id
	if (fileId) {
		mediaArray.push({
			type: mediaType, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
			media: fileId,
			has_media_spoiler: message.has_media_spoiler || false,
			caption:
				mediaArray.length === 0
					? message.caption || message.text || ''
					: undefined,
			caption_entities:
				mediaArray.length === 0 ? message.caption_entities || '' : undefined,
			show_caption_above_media:
				mediaArray.length === 0
					? message.show_caption_above_media || false
					: undefined,
		});

		setTimeout(() => {
			if (
				mediaGroups.has(mediaGroupId) &&
				mediaGroups.get(mediaGroupId).length > 0
			) {
				queue.push({
					chatId: message.chat.id,
					media: mediaGroups.get(mediaGroupId),
				});
				mediaGroups.delete(mediaGroupId);
				sendReply(message, '‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.');
			}
		}, 2000);
	} else {
		sendReply(message, '‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å `file_id`.');
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
async function sendMessageFromQueue() {
	if (queue.length === 0) return;
	const task = queue.shift();

	try {
		if (task.media.length > 1) {
			task.media.forEach((item, index) => {
				if (index > 0) delete item.caption;
			});
			await sendMediaGroup(task.media); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
		} else {
			await sendMessage(
				task.chatId,
				task.media[0].messageId,
				task.media[0].caption || ''
			); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		}
		await bot.telegram.sendMessage(ADMIN_ID, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!');
	} catch (error) {
		await bot.telegram.sendMessage(ADMIN_ID, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
	}
}

schedule.scheduleJob('0 * * * *', sendMessageFromQueue);

bot.on('message', async (ctx) => {
	if (ctx.chat.id !== ADMIN_ID) return;

	setTimeout(() => {
		const { message } = ctx;
		const mediaGroupId = message.media_group_id;
		const caption = message.caption || message.text || '';

		// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞"
		const dateRegex = /(\d{2})-(\d{2})-(\d{4}) (\d{2}):(\d{2})/;
		const match = caption.match(dateRegex);

		if (match) {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
			const [_, day, month, year, hour, minute] = match;
			const sendDate = moment(
				`${year}-${month}-${day} ${hour}:${minute}`,
				'YYYY-MM-DD HH:mm'
			);

			// –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			const newCaption = caption.replace(dateRegex, '').trim();

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
			const delay = sendDate.diff(moment(), 'milliseconds');
			if (delay > 0) {
				schedule.scheduleJob(sendDate.toDate(), async () => {
					queue.push({
						chatId: ctx.chat.id,
						media: [
							{
								type: 'message',
								messageId: message.message_id,
								caption: newCaption,
							},
						],
					});
					sendReply(ctx, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.');
				});
			} else {
				sendReply(ctx, '‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.');
			}
		} else if (mediaGroupId) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
			if (!mediaGroups.has(mediaGroupId)) mediaGroups.set(mediaGroupId, []);

			const mediaArray = mediaGroups.get(mediaGroupId);
			processMediaGroup(message, mediaGroupId, mediaArray); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
		} else {
			// –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
			queue.push({
				chatId: ctx.chat.id,
				media: [{ type: 'message', messageId: message.message_id }],
			});
			sendReply(ctx, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.');
		}
	}, 600000);
});

startServer();
bot.launch();
bot.telegram.sendMessage(ADMIN_ID, 'ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
